generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String               @id @default(cuid())
  username                  String?              @unique
  email                     String?              @unique
  emailVerified             DateTime?
  image                     String?
  name                      String?
  emailNotificationsEnabled Boolean?             @default(true)
  createdCommunities        Community[]          @relation("CreatedBy")
  moderatingCommunities     CommunityModerator[]
  sessions                  Session[]
  posts                     Post[]
  comments                  Comment[]
  commentVotes              CommentVote[]
  votes                     Vote[]
  subscriptions             Subscription[]
  account                   Account[]
  feeds                     Feed[]
}

model Feed {
  id          String      @id @default(cuid())
  name        String
  createdAt   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  communities Community[]
}

model CommunityModerator {
  communityId String
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([communityId, userId])
}

model Community {
  id          String               @id @default(cuid())
  name        String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  creatorId   String?
  feedId      String?
  posts       Post[]
  creator     User?                @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
  moderators  CommunityModerator[]
  feeds       Feed[]

  @@index([name])
}

model Subscription {
  userId      String
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  communityId String
  authorId    String
  tag         String?
  url         String?
  channel     String?
  embedurl    String?
  sitename    String?
  community   Community @relation(fields: [communityId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  votes       Vote[]
  score       Int       @default(0)
}

model Comment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  text      String
  postId    String
  authorId  String
  replyToId String?
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User          @relation(fields: [authorId], references: [id])
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  user   User     @relation(fields: [userId], references: [id])
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model CommunityFeed {
  communityId String
  feedId      String

  @@id([communityId, feedId])
}

enum VoteType {
  UP
  DOWN
}
